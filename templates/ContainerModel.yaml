---
AWSTemplateFormatVersion: "2010-09-09"

Description: "This template create a container model"

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/28"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "StackName"
          Value: !Ref AWS::StackName
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.0.1/28"
      VpcId: !Ref Vpc
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet
  PublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      SubnetId: !Ref PublicSubnet
  AllowEffemeralPortsIngressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 100
  AllowEffemeralPortsEgressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 100
  AllowSSHPortIngressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 200
  AllowSSHPortEgressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 200
  AllowHTTPPortIngressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 300
  AllowHTTPPortEgressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 300
  AllowHTTPSPortIngressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 400
  AllowHTTPSPortEgressInPublicSubnet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref PublicSubnetNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 400
  ContainerEC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "This is container ec2 instance security group"
      GroupName: !Join
        - ""
        - - !Ref AWS::StackName
          - "-container-ec2-instance-sg"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
      VpcId: !Ref Vpc
  ContainerEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: "us-east-1a"
      ImageId: "ami-0c7217cdde317cfec"
      InstanceType: "t2.micro"
      SecurityGroupIds:
        - !Ref ContainerEC2InstanceSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash            
            sudo apt update -y
            sudo apt install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
            sudo apt update -y
            sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref ContainerEC2Instance