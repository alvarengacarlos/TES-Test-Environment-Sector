service: tes
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 20
  apiName: ${sls:stage}-tes-rest-api-gateway
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "cognito-idp:DescribeUserPoolClient"
            - "cognito-idp:AdminInitiateAuth"
          Resource: ${self:custom.cognitoUserPoolArn}
        - Effect: Allow
          Action:
            - "s3:GetObject"
          Resource: !Join
            - ""
            - - ${self:custom.tesS3BucketArn}
              - "/*"
        - Effect: Allow
          Action:
            - "secretsmanager:CreateSecret"
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:DeleteSecret"
            - "secretsmanager:UpdateSecret"
          Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"

package:
  patterns:
    - "!*"
    - "!.idea/**"
  include:
    - "dist/**"
    - "node_modules/**"

functions:
  proxyLambda:
    handler: dist/index.handler
    name: ${sls:stage}-tes-proxy-lambda
    events:
      - http:
          path: /sign-up
          method: post
          cors: true
      - http:
          path: /confirm-sign-up
          method: post
          cors: true
      - http:
          path: /sign-in
          method: post
          cors: true
      - http:
          path: /{proxy+}
          method: any
          cors: true
          authorizer:
            name: ${self:custom.cognitoUserPoolName}
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArn}
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognitoUserPoolId}
      COGNITO_CLIENT_ID: ${self:custom.cognitoUserPoolClientId}
      # COGNITO_CLIENT_SECRET environment variable is set dynamically inside the application in util/getCognitoClientSecret.ts
      COGNITO_CLIENT_SECRET: ""
      TES_S3_BUCKET_NAME: ${self:custom.tesS3BucketName}

resources:
  Resources:
    tesS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.tesS3BucketName}
    cognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: "verified_email"
              Priority: 2
        AutoVerifiedAttributes:
          - "email"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 0
        UsernameAttributes:
          - "email"
        UserPoolName: ${self:custom.cognitoUserPoolName}
    cognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        AccessTokenValidity: 24
        ClientName: ${sls:stage}-tes-cognito-user-pool-client
        ExplicitAuthFlows:
          - "ALLOW_ADMIN_USER_PASSWORD_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"
        GenerateSecret: true
        IdTokenValidity: 24
        TokenValidityUnits:
          AccessToken: "hours"
          IdToken: "hours"
          RefreshToken: "hours"
        RefreshTokenValidity: 48
        UserPoolId: ${self:custom.cognitoUserPoolId}

custom:
  cognitoUserPoolName: ${sls:stage}-tes-cognito-user-pool
  cognitoUserPoolId: !Ref cognitoUserPool
  cognitoUserPoolClientId: !Ref cognitoUserPoolClient
  cognitoUserPoolArn: !GetAtt cognitoUserPool.Arn
  tesS3BucketName: ${sls:stage}-tes-s3-bucket
  tesS3BucketArn: !GetAtt tesS3Bucket.Arn